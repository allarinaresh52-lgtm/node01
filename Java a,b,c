import java.io.*;
import java.util.*;

// --- Student Class for Serialization ---
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int id;
    String name;

    Student(int id, String name) {
        this.id = id;
        this.name = name;
    }

    void display() {
        System.out.println("ID: " + id + ", Name: " + name);
    }
}

// --- Employee Class for File Handling ---
class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    int id;
    String name;
    double salary;

    Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    void display() {
        System.out.println("ID: " + id + ", Name: " + name + ", Salary: " + salary);
    }
}

public class CombinedProgram {
    static final String STUDENT_FILE = "student.ser";
    static final String EMPLOYEE_FILE = "employees.dat";

    // --- Part A: Autoboxing & Unboxing ---
    public static void sumOfIntegers() {
        int a = 10;
        int b = 20;

        Integer objA = a; // autoboxing
        Integer objB = b;

        int sum = objA + objB; // unboxing
        System.out.println("Sum of integers = " + sum);
    }

    // --- Part B: Serialization & Deserialization ---
    public static void serializeStudent() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(STUDENT_FILE))) {
            Student s1 = new Student(101, "Alice");
            oos.writeObject(s1);
            System.out.println("Student serialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void deserializeStudent() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(STUDENT_FILE))) {
            Student s2 = (Student) ois.readObject();
            System.out.println("Deserialized Student:");
            s2.display();
        } catch (Exception e) {
            System.out.println("No student found. Serialize first!");
        }
    }

    // --- Part C: Employee Management with File Handling ---
    public static void addEmployee(Employee e) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(EMPLOYEE_FILE, true)) {
            @Override
            protected void writeStreamHeader() throws IOException {} // prevent overwriting header
        }) {
            oos.writeObject(e);
            System.out.println("Employee added.");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void viewEmployees() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(EMPLOYEE_FILE))) {
            while (true) {
                Employee e = (Employee) ois.readObject();
                e.display();
            }
        } catch (EOFException e) {
            // End of file
        } catch (Exception ex) {
            System.out.println("No employees found!");
        }
    }

    // --- Main Menu ---
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n=== Combined Program Menu ===");
            System.out.println("1. Part A - Sum of Integers (Autoboxing & Unboxing)");
            System.out.println("2. Part B - Serialize Student");
            System.out.println("3. Part B - Deserialize Student");
            System.out.println("4. Part C - Add Employee");
            System.out.println("5. Part C - View Employees");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    sumOfIntegers();
                    break;
                case 2:
                    serializeStudent();
                    break;
                case 3:
                    deserializeStudent();
                    break;
                case 4:
                    System.out.print("Enter Employee ID: ");
                    int id = sc.nextInt();
                    sc.nextLine();
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter Salary: ");
                    double salary = sc.nextDouble();
                    addEmployee(new Employee(id, name, salary));
                    break;
                case 5:
                    viewEmployees();
                    break;
                case 6:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice!");
            }
        } while (choice != 6);

        sc.close();
    }
}
