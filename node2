// server.js
const express = require("express");
const app = express();
app.use(express.json());

// In-memory playing card collection
let cards = [
  { id: 1, suit: "Hearts", value: "A" },
  { id: 2, suit: "Spades", value: "K" },
];

// Routes

// 1. Get all cards
app.get("/cards", (req, res) => {
  res.json(cards);
});

// 2. Get a single card by ID
app.get("/cards/:id", (req, res) => {
  const card = cards.find((c) => c.id === parseInt(req.params.id));
  if (!card) return res.status(404).json({ message: "Card not found" });
  res.json(card);
});

// 3. Add a new card
app.post("/cards", (req, res) => {
  const { suit, value } = req.body;
  const newCard = {
    id: cards.length ? cards[cards.length - 1].id + 1 : 1,
    suit,
    value,
  };
  cards.push(newCard);
  res.status(201).json(newCard);
});

// 4. Update a card
app.put("/cards/:id", (req, res) => {
  const card = cards.find((c) => c.id === parseInt(req.params.id));
  if (!card) return res.status(404).json({ message: "Card not found" });

  const { suit, value } = req.body;
  if (suit) card.suit = suit;
  if (value) card.value = value;

  res.json(card);
});

// 5. Delete a card
app.delete("/cards/:id", (req, res) => {
  const index = cards.findIndex((c) => c.id === parseInt(req.params.id));
  if (index === -1) return res.status(404).json({ message: "Card not found" });

  const deletedCard = cards.splice(index, 1);
  res.json(deletedCard[0]);
});

// Server start
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});
